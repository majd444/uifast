"use client";

import React, { useState, useEffect, useRef } from 'react';
import { Plus, MessageSquare, Settings, Wrench, Save, FolderOpen, Play, Search, Mail, FileText, Calendar, BarChart } from 'lucide-react';
import GoogleAuth, { GoogleServiceConnector } from './GoogleAuth';
import { getConfigForm } from './ToolConfigForms';

// Custom X icon component
const CloseIcon = ({ size = 18 }) => (
  <svg 
    xmlns="http://www.w3.org/2000/svg" 
    width={size} 
    height={size} 
    viewBox="0 0 24 24" 
    fill="none" 
    stroke="currentColor" 
    strokeWidth="2" 
    strokeLinecap="round" 
    strokeLinejoin="round"
  >
    <path d="M18 6 6 18"></path>
    <path d="m6 6 12 12"></path>
  </svg>
);

// Google Products requiring OAuth2
const AVAILABLE_TOOLS = [
  { 
    id: 1, 
    name: 'Gmail', 
    description: 'Access and process emails from Gmail', 
    category: 'google', 
    service: 'gmail',
    icon: Mail,
    requiresAuth: true 
  },
  { 
    id: 2, 
    name: 'Google Drive', 
    description: 'Access and manage files in Google Drive', 
    category: 'google', 
    service: 'drive',
    icon: FileText,
    requiresAuth: true 
  },
  { 
    id: 3, 
    name: 'Google Calendar', 
    description: 'Access and manage Google Calendar events', 
    category: 'google', 
    service: 'calendar',
    icon: Calendar,
    requiresAuth: true 
  },
  { 
    id: 4, 
    name: 'Google Sheets', 
    description: 'Access and analyze data in Google Sheets', 
    category: 'google', 
    service: 'sheets',
    icon: BarChart,
    requiresAuth: true 
  },
  { 
    id:5, 
    name: 'Google Docs', 
    description: 'Access and generate content in Google Docs', 
    category: 'google', 
    service: 'docs',
    icon: FileText,
    requiresAuth: true 
  }
];

export default function SimpleWorkflowBuilder() {
  const [nodes, setNodes] = useState([]);
  const [showComponentSelector, setShowComponentSelector] = useState(false);
  const [selectorPosition, setSelectorPosition] = useState({ x: 0, y: 0 });
  const [activeNodeId, setActiveNodeId] = useState(null);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const canvasRef = useRef(null);
  
  // Tool search related state
  const [searchQueries, setSearchQueries] = useState({});
  const [expandedToolNodeId, setExpandedToolNodeId] = useState(null);
  
  // Google OAuth state
  const [googleUser, setGoogleUser] = useState(null);
  const [connectedServices, setConnectedServices] = useState({});
  
  // Handle Google auth success
  const handleGoogleAuthSuccess = (user) => {
    setGoogleUser(user);
  };
  
  // Handle connecting to a Google service
  const handleConnectService = (service) => {
    // This will now use our custom Google authentication flow
    // The actual authentication happens in the GoogleServiceConnector component
    
    // After authentication, update the connected services state
    setConnectedServices({
      ...connectedServices,
      [service]: true
    });
  };
  
  // Handle selecting a tool and showing its configuration
  const handleToolSelection = (nodeId, tool) => {
    // Check if it's a Google tool that requires authentication
    if (tool.requiresAuth && tool.category === 'google') {
      if (googleUser) {
        // If user is authenticated with Google but service not connected yet
        if (!connectedServices[tool.service]) {
          handleConnectService(tool.service);
        }
        
        // Update the node with the selected tool and set it as active
        const updatedNodes = nodes.map(n => {
          if (n.id === nodeId) {
            return {
              ...n,
              tools: [tool], // Replace any existing tools with just this one
              activeToolId: tool.id // Mark this tool as active to show config
            };
          }
          return n;
        });
        
        setNodes(updatedNodes);
        
        // Close the tool selector
        setExpandedToolNodeId(null);
      }
    } else {
      // Standard flow for regular tools
      const updatedNodes = nodes.map(n => {
        if (n.id === nodeId) {
          return {
            ...n,
            tools: [tool], // Replace any existing tools with just this one
            activeToolId: tool.id // Mark this tool as active
          };
        }
        return n;
      });
      
      setNodes(updatedNodes);
      setExpandedToolNodeId(null);
    }
  };
  
  // Reset tool selection and go back to search mode
  const resetToolSelection = (nodeId) => {
    const updatedNodes = nodes.map(n => 
      n.id === nodeId ? {...n, tools: [], activeToolId: null} : n
    );
    setNodes(updatedNodes);
    setSearchQueries({...searchQueries, [nodeId]: ''});
    setExpandedToolNodeId(nodeId);
  };
  
  // Find a position that doesn't overlap with existing nodes
  const findNonOverlappingPosition = (baseX, baseY) => {
    // Default dimensions for a node
    const nodeWidth = 256; // w-64 is 16rem which is 256px
    const nodeHeight = 120; // approximate height
    const padding = 20; // space between nodes
    
    let newX = baseX;
    let newY = baseY;
    let foundPosition = false;
    let attempts = 0;
    const maxAttempts = 10;
    
    while (!foundPosition && attempts < maxAttempts) {
      foundPosition = true;
      
      // Check against all existing nodes
      for (const node of nodes) {
        // Simple bounding box collision detection
        if (
          newX < node.x + nodeWidth + padding &&
          newX + nodeWidth + padding > node.x &&
          newY < node.y + nodeHeight + padding &&
          newY + nodeHeight + padding > node.y
        ) {
          // Collision detected, try a new position
          foundPosition = false;
          newY += nodeHeight + padding;
          
          // If we're getting too far down, reset Y and shift X
          if (newY > window.innerHeight - 200) {
            newY = 150;
            newX += nodeWidth + padding;
          }
          
          // If we're getting too far right, wrap around
          if (newX > window.innerWidth - 300) {
            newX = 100;
            newY = 150;
          }
          
          break;
        }
      }
      
      attempts++;
    }
    
    return { x: newX, y: newY };
  };
  
  const handleStartClick = () => {
    const initialPosition = { x: window.innerWidth / 2 - 150, y: window.innerHeight / 2 - 100 };
    setSelectorPosition(initialPosition);
    setShowComponentSelector(true);
  };
  
  const addComponent = (type) => {
    const defaultContent = type === 'starter' ? 'New Conversation Starter' : 
                          type === 'prompt' ? 'New Prompt Instructions' : 'Select Tool';
    
    // Find a position that doesn't overlap
    const position = findNonOverlappingPosition(selectorPosition.x, selectorPosition.y + 20);
    
    const newNode = {
      id: Date.now(),
      type,
      x: position.x,
      y: position.y,
      content: defaultContent,
      tools: type === 'tool' ? [] : undefined, // Only for tool nodes
    };
    
    setNodes([...nodes, newNode]);
    setShowComponentSelector(false);
    
    // If it's a tool node, expand it by default
    if (type === 'tool') {
      setExpandedToolNodeId(newNode.id);
      setSearchQueries({ ...searchQueries, [newNode.id]: '' });
    }
  };
  
  const deleteNode = (id) => {
    setNodes(nodes.filter(node => node.id !== id));
  };
  
  // Add grid pattern style
  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      .bg-grid-pattern {
        background-image: 
          linear-gradient(to right, rgba(0, 0, 0, 0.1) 1px, transparent 1px),
          linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
        background-size: 20px 20px;
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  // Handle drag functionality
  useEffect(() => {
    const handleMouseMove = (e) => {
      if (activeNodeId !== null) {
        const updatedNodes = nodes.map(node => {
          if (node.id === activeNodeId) {
            return {
              ...node,
              x: e.clientX - dragOffset.x,
              y: e.clientY - dragOffset.y
            };
          }
          return node;
        });
        setNodes(updatedNodes);
      }
    };

    const handleMouseUp = () => {
      setActiveNodeId(null);
    };

    if (activeNodeId !== null) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, [activeNodeId, dragOffset, nodes]);

  const handleMouseDown = (e, nodeId) => {
    e.preventDefault();
    const node = nodes.find(node => node.id === nodeId);
    if (node) {
      setActiveNodeId(nodeId);
      setDragOffset({
        x: e.clientX - node.x,
        y: e.clientY - node.y
      });
    }
  };
  
  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Simple header */}
      <header className="bg-blue-700 text-white p-3 flex justify-between items-center shadow-md">
        <h1 className="text-xl font-bold">Workflow Builder</h1>
        <div className="flex items-center space-x-4">
          <div className="mr-2">
            <GoogleAuth onAuthSuccess={handleGoogleAuthSuccess} buttonText="Connect Google" />
          </div>
          <div className="flex space-x-2">
            <button className="bg-green-600 hover:bg-green-700 px-3 py-1 rounded flex items-center space-x-1 shadow-sm">
              <Play size={16} />
              <span>Test</span>
            </button>
            <button className="bg-blue-600 hover:bg-blue-800 px-3 py-1 rounded flex items-center space-x-1 shadow-sm">
              <Save size={16} />
              <span>Save</span>
            </button>
            <button className="bg-blue-600 hover:bg-blue-800 px-3 py-1 rounded flex items-center space-x-1 shadow-sm">
              <FolderOpen size={16} />
              <span>Load</span>
            </button>
          </div>
        </div>
      </header>
      
      {/* Main canvas */}
      <div ref={canvasRef} className="flex-1 relative bg-white overflow-hidden">
        {/* Grid background */}
        <div className="absolute inset-0 bg-grid-pattern"></div>
        
        {/* Start button */}
        <div className="absolute top-8 left-1/2 transform -translate-x-1/2">
          <button 
            onClick={handleStartClick}
            className="bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded-full shadow-lg flex items-center space-x-1"
          >
            <Plus size={20} />
            <span>Start</span>
          </button>
        </div>
        
        {/* Nodes */}
        {nodes.map(node => (
          <div 
            key={node.id}
            className={`absolute p-4 rounded-lg shadow-lg w-64 cursor-move transition-shadow hover:shadow-xl ${
              node.type === 'starter' ? 'bg-green-100 border-2 border-green-500' : 
              node.type === 'prompt' ? 'bg-blue-100 border-2 border-blue-500' : 
              'bg-purple-100 border-2 border-purple-500'
            }`}
            onMouseDown={(e) => handleMouseDown(e, node.id)}
            </div>
            <button 
              className="text-gray-500 hover:text-red-600 transition-colors duration-200 p-1 rounded-full hover:bg-red-100" 
              onClick={(e) => {
                e.stopPropagation();
                deleteNode(node.id);
              }}
              title="Delete node"
            >
              <CloseIcon size={18} />
            </button>
          </div>
          {node.type === 'tool' ? (
            <div>
              {/* If a tool is selected and active, show its configuration */}
              {node.tools?.length === 1 && node.activeToolId ? (
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <div className="font-medium text-sm flex items-center">
                      {node.tools[0].icon && React.createElement(node.tools[0].icon, { size: 14, className: "mr-1 text-purple-600" })}
                      {node.tools[0].name}
                    <div className="flex justify-between items-center mb-2">
                      <div className="font-medium text-sm flex items-center">
                        {node.tools[0].icon && React.createElement(node.tools[0].icon, { size: 14, className: "mr-1 text-purple-600" })}
                        {node.tools[0].name}
                      </div>
                      <button 
                        className="text-gray-500 hover:text-gray-700 transition-colors duration-200 p-1 rounded-full hover:bg-gray-100" 
                        onClick={() => resetToolSelection(node.id)}
                        title="Change tool"
                      >
                        <Search size={16} />
                      </button>
                    </div>
                    
                    {/* Tool-specific configuration forms */}
                    {node.tools[0].service && getConfigForm(node.tools[0].service, connectedServices, handleConnectService)}
                  </div>
                ) : (
                  <div>
                    {/* Search input */}
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <Search size={16} className="text-gray-400" />
                      </div>
                      <input
                        type="text"
                        className="w-full pl-10 pr-4 py-2 bg-gray-50 border border-gray-300 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        placeholder="Search for tools..."
                        value={searchQueries[node.id] || ''}
                        onMouseDown={(e) => e.stopPropagation()}
                        onTouchStart={(e) => e.stopPropagation()}
                        onChange={(e) => {
                          setSearchQueries({
                            ...searchQueries,
                            [node.id]: e.target.value
                          });
                          setExpandedToolNodeId(node.id);
                        }}
                        onClick={() => {
                          setExpandedToolNodeId(expandedToolNodeId === node.id ? null : node.id);
                        }}
                      />
                    </div>
                    
                    {/* Tool search results - directly embedded in the node */}
                    {expandedToolNodeId === node.id && (
                      <div className="mt-2 bg-white rounded-lg border border-gray-200 p-2 max-h-60 overflow-y-auto relative">
                        <button 
                          className="absolute -top-2 -right-2 bg-gray-200 rounded-full p-1 hover:bg-gray-300 z-10"
                          onClick={(e) => {
                            e.stopPropagation();
                            setExpandedToolNodeId(null);
                          }}
                          onMouseDown={(e) => e.stopPropagation()}
                        >
                          <CloseIcon size={12} />
                        </button>
                        
                        {AVAILABLE_TOOLS
                          .filter(tool => {
                            const query = searchQueries[node.id] || '';
                            if (!query.trim()) return true;
                            return (
                              tool.name.toLowerCase().includes(query.toLowerCase()) ||
                              tool.description.toLowerCase().includes(query.toLowerCase())
                            );
                          })
                          .slice(0, searchQueries[node.id]?.trim() ? 3 : AVAILABLE_TOOLS.length)
                          .map(tool => {
                            const isSelected = node.tools?.some(t => t.id === tool.id) || false;
                            
                            return (
                              <div 
                                key={tool.id}
                                className={`p-2 rounded mb-1 cursor-pointer hover:bg-gray-100 ${isSelected ? 'bg-purple-50 border border-purple-200' : ''}`}
                                onClick={(e) => {
                                  e.stopPropagation();
                                  // When a tool is clicked, immediately select it and show its configuration
                                  handleToolSelection(node.id, tool);
                                  // Close the tool search dropdown immediately
                                  setExpandedToolNodeId(null);
                                }}
                                onMouseDown={(e) => e.stopPropagation()}
                              >
                                <div className="flex justify-between items-center">
                                  <div className="font-medium text-sm flex items-center">
                                    {tool.icon && React.createElement(tool.icon, { size: 14, className: "mr-1 text-purple-600" })}
                                    {tool.name}
                                  </div>
                                  {tool.requiresAuth && tool.category === 'google' && (
                                    <div className="text-xs">
                                      {!googleUser ? (
                                        <span 
                                          className="text-orange-500 cursor-pointer hover:underline" 
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            // When clicked, select this tool and show its configuration
                                            handleToolSelection(node.id, tool);
                                            // Close the tool search dropdown
                                            setExpandedToolNodeId(null);
                                          }}
                                        >
                                          Requires Google Auth
                                        </span>
                                      ) : !connectedServices[tool.service] ? (
                                        <span 
                                          className="text-blue-500 cursor-pointer hover:underline"
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            // When clicked, select this tool and show its configuration
                                            handleToolSelection(node.id, tool);
                                            // Close the tool search dropdown
                                            setExpandedToolNodeId(null);
                                          }}
                                        >
                                          Click to connect
                                        </span>
                                      ) : (
                                        <span className="text-green-500">Connected</span>
                                      )}
                                    </div>
                                  )}
                                </div>
                                <div className="text-xs text-gray-500">{tool.description}</div>
                                
                                {/* Show Google service connector if needed */}
                                {tool.requiresAuth && tool.category === 'google' && googleUser && !isSelected && !connectedServices[tool.service] && (
                                  <div className="mt-2">
                                    <GoogleServiceConnector 
                                      service={tool.service}
                                      isAuthenticated={!!connectedServices[tool.service]}
                                      onConnect={() => handleConnectService(tool.service)}
                                    />
                                  </div>
                                )}
                              </div>
                            );
                          })}
                        
                        <div className="mt-3 flex justify-end">
                          <button 
                            className="bg-purple-600 hover:bg-purple-700 text-white px-3 py-1 rounded text-sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              setExpandedToolNodeId(null);
                            }}
                            onMouseDown={(e) => e.stopPropagation()}
                          >
                            Done
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ) : (
              <div className="bg-white p-2 rounded border border-gray-200">
                <input 
                  type="text" 
                  className="w-full px-2 py-1 bg-transparent border-0 outline-none" 
                  defaultValue={node.content || ''}
                  onMouseDown={(e) => e.stopPropagation()}
                  onTouchStart={(e) => e.stopPropagation()}
                  onChange={(e) => {
                    const updatedNodes = nodes.map(n => 
                      n.id === node.id ? {...n, content: e.target.value} : n
                    );
                    setNodes(updatedNodes);
                  }}
                />
              </div>
            )}
            
            {/* Display selected tools if this is a tool node */}
            {node.type === 'tool' && node.tools && node.tools.length > 0 && (
              <div className="mt-2 bg-white p-2 rounded border border-gray-200">
                <div className="text-xs text-gray-500 mb-1">Selected Tools:</div>
                <div className="flex flex-wrap gap-1">
                  {node.tools.map(tool => (
                    <div key={tool.id} className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full flex items-center">
                      <span>{tool.name}</span>
                      <button 
                        className="ml-1 text-purple-600 hover:text-purple-800"
                        onClick={(e) => {
                          e.stopPropagation();
                          const updatedNodes = nodes.map(n => {
                            if (n.id === node.id) {
                              return {
                                ...n,
                                tools: n.tools.filter(t => t.id !== tool.id)
                              };
                            }
                            return n;
                          });
                          setNodes(updatedNodes);
                        }}
                      >
                        <CloseIcon size={12} />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* Add button at bottom of node */}
            <div className="mt-2 flex justify-center">
              <button 
                className="bg-gray-200 hover:bg-gray-300 rounded-full p-1"
                onClick={() => {
                  setSelectorPosition({ 
                    x: node.x, 
                    y: node.y + 130 
                  });
                  setShowComponentSelector(true);
                }}
              >
                <Plus size={16} />
              </button>
            </div>
          </div>
        ))}
        
        
        {/* Component selector popup */}
        {showComponentSelector && (
          <div 
            className="absolute bg-white rounded-lg shadow-lg border border-gray-200 p-2 z-20"
            style={{ left: `${selectorPosition.x}px`, top: `${selectorPosition.y}px` }}
          >
            <div className="flex space-x-2">
              <button 
                onClick={() => addComponent('starter')}
                className="flex flex-col items-center justify-center p-3 hover:bg-green-50 rounded-md"
              >
                <div className="w-10 h-10 rounded-full bg-green-200 flex items-center justify-center mb-1 shadow-sm">
                  <MessageSquare size={20} className="text-green-600" />
                </div>
                <span className="text-xs">Start</span>
              </button>
              
              <button 
                onClick={() => addComponent('prompt')}
                className="flex flex-col items-center justify-center p-3 hover:bg-blue-50 rounded-md"
              >
                <div className="w-10 h-10 rounded-full bg-blue-200 flex items-center justify-center mb-1 shadow-sm">
                  <Settings size={20} className="text-blue-600" />
                </div>
                <span className="text-xs">Prompt</span>
              </button>
              
              <button 
                onClick={() => addComponent('tool')}
                className="flex flex-col items-center justify-center p-3 hover:bg-purple-50 rounded-md"
              >
                <div className="w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center mb-1 shadow-sm">
                  <Wrench size={20} className="text-purple-600" />
                </div>
                <span className="text-xs">Tool</span>
              </button>
            </div>
            
            <button 
              className="absolute -top-2 -right-2 bg-gray-200 rounded-full p-1 hover:bg-gray-300"
              onClick={() => setShowComponentSelector(false)}
            >
              <CloseIcon size={12} />
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
